sumTo(1); // 1
sumTo(2); // 2 + 1 = 3
sumTo(3); // 3 + 2 + 1 = 6
sumTo(4); // 4 + 3 + 2 + 1 = 10
//...
sumTo(100); // 100 + 99 + ... + 2 + 1 = 5050

function sumTo(n) {
    let sum = 0;
    for (let i = 1; i <= n; i++) {
        sum += i;
    }
    return sum;
}

alert( sumTo(100) );

function sumTo(n) {
    if (n == 1) {
        return n;
    } else {
        return n + sumTo(n - 1);
    }
}

alert( sumTo(100) );

function sumTo(n) {
    return (1 + n) * n / 2 ;
}
  
alert( sumTo(100) );


/* P.S. Какой вариант решения самый быстрый? Самый медленный? Почему? - 
            Самый быстрый последний (по формуле), так как нет ни циклов, ни необходимости запоминать каждый контекст выполнения
            Самый медленный вариант с рекурсией, так как надо запоминать каждый контекст выполнения вложенных вызовов

P.P.S. Можно ли при помощи рекурсии посчитать sumTo(100000)? - 
            Может быть получится, а может быть и нет, так как для большинства движков JavaScript такой вызов за пределами возможностей*/